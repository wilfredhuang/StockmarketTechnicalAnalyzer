[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fetch_and_process_stock_data",
        "importPath": "app.helpers.stock_utils",
        "description": "app.helpers.stock_utils",
        "isExtraImport": true,
        "detail": "app.helpers.stock_utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def load_data(tickers: List[str]) -> pd.DataFrame:\n    pass\ndef visualize(ticker, indicators: List[str]):\n    pass\ndef compute_indicators(df: pd.DataFrame, indicators: List[str]) -> pd.DataFrame:\n    pass\ndef rank_stocks(tickers: pd.DataFrame) -> pd.DataFrame:\n    # TO DO: logic to rank the stocks according to some rule using information from the indicators\n    # returns the tickers and their ranking 1 to N\n    # to be shown to user as a suggestion",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "visualize",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def visualize(ticker, indicators: List[str]):\n    pass\ndef compute_indicators(df: pd.DataFrame, indicators: List[str]) -> pd.DataFrame:\n    pass\ndef rank_stocks(tickers: pd.DataFrame) -> pd.DataFrame:\n    # TO DO: logic to rank the stocks according to some rule using information from the indicators\n    # returns the tickers and their ranking 1 to N\n    # to be shown to user as a suggestion\n    pass\ndef test_stocks(tickers: List[str]) -> pd.DataFrame:",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "compute_indicators",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def compute_indicators(df: pd.DataFrame, indicators: List[str]) -> pd.DataFrame:\n    pass\ndef rank_stocks(tickers: pd.DataFrame) -> pd.DataFrame:\n    # TO DO: logic to rank the stocks according to some rule using information from the indicators\n    # returns the tickers and their ranking 1 to N\n    # to be shown to user as a suggestion\n    pass\ndef test_stocks(tickers: List[str]) -> pd.DataFrame:\n    # using the tickers that the user has chosen\n    # mimic what happened if the user had bought/traded them (testing with the last one year data)",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "rank_stocks",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def rank_stocks(tickers: pd.DataFrame) -> pd.DataFrame:\n    # TO DO: logic to rank the stocks according to some rule using information from the indicators\n    # returns the tickers and their ranking 1 to N\n    # to be shown to user as a suggestion\n    pass\ndef test_stocks(tickers: List[str]) -> pd.DataFrame:\n    # using the tickers that the user has chosen\n    # mimic what happened if the user had bought/traded them (testing with the last one year data)\n    # uses the backtest function\n    pass",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "test_stocks",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def test_stocks(tickers: List[str]) -> pd.DataFrame:\n    # using the tickers that the user has chosen\n    # mimic what happened if the user had bought/traded them (testing with the last one year data)\n    # uses the backtest function\n    pass\ndef backtest(tickers: pd.DataFrame):\n    pass\n# to be confirmed\ndef predict(df: pd.DataFrame):\n    pass",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "backtest",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def backtest(tickers: pd.DataFrame):\n    pass\n# to be confirmed\ndef predict(df: pd.DataFrame):\n    pass",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "app.helpers.process_utils",
        "description": "app.helpers.process_utils",
        "peekOfCode": "def predict(df: pd.DataFrame):\n    pass",
        "detail": "app.helpers.process_utils",
        "documentation": {}
    },
    {
        "label": "fetch_and_process_stock_data",
        "kind": 2,
        "importPath": "app.helpers.stock_utils",
        "description": "app.helpers.stock_utils",
        "peekOfCode": "def fetch_and_process_stock_data():\n    # List of 20 U.S. stocks (you can modify this list)\n    stocks = ['AAPL', 'MSFT', 'AMZN', 'GOOGL', 'FB', 'TSLA', 'BRK-B', 'JPM', 'JNJ', 'V', 'PG', 'UNH', 'MA', 'NVDA', 'HD', 'DIS', 'BAC', 'ADBE', 'CRM', 'NFLX']\n    end_date = datetime.now()  # Current date OR datetime(2024, 1, 1) - 01/01/24\n    start_date = end_date - timedelta(days=3652)  # Approximately 10 years\n    all_data = []\n    for stock in stocks:\n        ticker = yf.Ticker(stock)\n        data = ticker.history(start=start_date, end=end_date)\n        data['Symbol'] = stock",
        "detail": "app.helpers.stock_utils",
        "documentation": {}
    },
    {
        "label": "logger_middleware",
        "kind": 2,
        "importPath": "app.middleware.logger",
        "description": "app.middleware.logger",
        "peekOfCode": "def logger_middleware():\n    # Skip logging for static files\n    if request.path.startswith('/static'):\n        return\n    method_colors = {\n        'GET': Fore.GREEN,\n        'POST': Fore.BLUE,\n        'PUT': Fore.YELLOW,\n        'DELETE': Fore.RED\n    }",
        "detail": "app.middleware.logger",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.middleware.logger",
        "description": "app.middleware.logger",
        "peekOfCode": "app = Flask(__name__)\n# Set up basic logging configuration\nlogging.basicConfig(level=logging.INFO, format='%(message)s')\n# Custom logger function\ndef logger_middleware():\n    # Skip logging for static files\n    if request.path.startswith('/static'):\n        return\n    method_colors = {\n        'GET': Fore.GREEN,",
        "detail": "app.middleware.logger",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def index():\n    # Initialize variable with env value [the direct way from .env file]\n    # secret_key = os.getenv('SECRET_KEY', 'default')\n    # Initialize variable with env value [get a variable value from the current config set]\n    secret_key = current_app.config.get('SECRET_KEY', 'default123')\n    # Define render variables\n    render_variables = {\n        'secret_key': secret_key,\n        'user_name': 'John Doe',\n    }",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "fetch_stock_data",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def fetch_stock_data():\n    try:\n        csv_filename = fetch_and_process_stock_data()\n        flash(f'Stock data successfully fetched and saved as {csv_filename}', 'success')\n    except Exception as e:\n        flash(f'Error fetching stock data: {str(e)}', 'danger')\n    return redirect(url_for('main.index'))\n@main_bp.route('/grid')\ndef grid_page():\n    # Define render variables",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "grid_page",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def grid_page():\n    # Define render variables\n    render_variables = {\n    }\n    return render_template('grid.html', **render_variables)",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "main_bp",
        "kind": 5,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "main_bp = Blueprint('main', __name__)\n@main_bp.route('/')\ndef index():\n    # Initialize variable with env value [the direct way from .env file]\n    # secret_key = os.getenv('SECRET_KEY', 'default')\n    # Initialize variable with env value [get a variable value from the current config set]\n    secret_key = current_app.config.get('SECRET_KEY', 'default123')\n    # Define render variables\n    render_variables = {\n        'secret_key': secret_key,",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app()\nif __name__ == '__main__':\n    # Get the debug mode variable based on current configuration\n    debug_mode = app.config.get('DEBUG', False)\n    app.run(debug=debug_mode)",
        "detail": "run",
        "documentation": {}
    }
]